{
  "version": 3,
  "sources": ["../../react-admin/src/Admin.tsx", "../../ra-i18n-polyglot/src/index.ts", "../../react-admin/src/defaultI18nProvider.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport { localStorageStore } from 'ra-core';\nimport {\n    AdminUI,\n    AdminContext,\n    AdminContextProps,\n    AdminUIProps,\n} from 'ra-ui-materialui';\n\nimport { defaultI18nProvider } from './defaultI18nProvider';\nconst defaultStore = localStorageStore();\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\nexport const Admin = (props: AdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        error,\n        i18nProvider = defaultI18nProvider,\n        layout,\n        loading,\n        loginPage,\n        authCallbackPage,\n        notification,\n        queryClient,\n        requireAuth,\n        store = defaultStore,\n        ready,\n        theme,\n        lightTheme,\n        darkTheme,\n        defaultTheme,\n        title = 'React Admin',\n    } = props;\n\n    if (loginPage === true && process.env.NODE_ENV !== 'production') {\n        console.warn(\n            'You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it'\n        );\n    }\n\n    return (\n        <AdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            store={store}\n            queryClient={queryClient}\n            theme={theme}\n            lightTheme={lightTheme}\n            darkTheme={darkTheme}\n            defaultTheme={defaultTheme}\n        >\n            <AdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                catchAll={catchAll}\n                error={error}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                authCallbackPage={authCallbackPage}\n                notification={notification}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </AdminUI>\n        </AdminContext>\n    );\n};\n\nexport default Admin;\n\nexport interface AdminProps extends AdminContextProps, AdminUIProps {}\n", "import Polyglot from 'node-polyglot';\n\nimport { I18nProvider, TranslationMessages, Locale } from 'ra-core';\n\ntype GetMessages = (\n    locale: string\n) => TranslationMessages | Promise<TranslationMessages>;\n\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(\n *     locale => messages[locale],\n *     'en',\n *     [{ locale: 'en', name: 'English' }, { locale: 'fr', name: 'FranÃ§ais' }]\n * )\n */\nexport default (\n    getMessages: GetMessages,\n    initialLocale: string = 'en',\n    availableLocales: Locale[] | any = [{ locale: 'en', name: 'English' }],\n    polyglotOptions: any = {}\n): I18nProvider => {\n    let locale = initialLocale;\n    const messages = getMessages(initialLocale);\n    if (messages instanceof Promise) {\n        throw new Error(\n            `The i18nProvider returned a Promise for the messages of the default locale (${initialLocale}). Please update your i18nProvider to return the messages of the default locale in a synchronous way.`\n        );\n    }\n\n    let availableLocalesFinal, polyglotOptionsFinal;\n    if (Array.isArray(availableLocales)) {\n        // third argument is an array of locales\n        availableLocalesFinal = availableLocales;\n        polyglotOptionsFinal = polyglotOptions;\n    } else {\n        // third argument is the polyglotOptions\n        availableLocalesFinal = [{ locale: 'en', name: 'English' }];\n        polyglotOptionsFinal = availableLocales;\n    }\n    const polyglot = new Polyglot({\n        locale,\n        phrases: { '': '', ...messages },\n        ...polyglotOptionsFinal,\n    });\n    let translate = polyglot.t.bind(polyglot);\n\n    return {\n        translate: (key: string, options: any = {}) => translate(key, options),\n        changeLocale: (newLocale: string) =>\n            // We systematically return a Promise for the messages because\n            // getMessages may return a Promise\n            Promise.resolve(getMessages(newLocale as string)).then(\n                (messages: TranslationMessages) => {\n                    locale = newLocale;\n                    const newPolyglot = new Polyglot({\n                        locale: newLocale,\n                        phrases: { '': '', ...messages },\n                        ...polyglotOptions,\n                    });\n                    translate = newPolyglot.t.bind(newPolyglot);\n                }\n            ),\n        getLocale: () => locale,\n        getLocales: () => availableLocalesFinal,\n    };\n};\n", "import defaultMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nexport const defaultI18nProvider = polyglotI18nProvider(\n    () => defaultMessages,\n    'en',\n    [{ name: 'en', value: 'English' }],\n    { allowMissing: true }\n);\n"],
  "mappingsuB;;;ACAvB,2BAAqB;;;;;;;;;;;;AA2BrB,IAAAA,eAAe,SACX,aACA,eACA,kBACA,iBAAyB;AAFzB,MAAA,kBAAA,QAAA;AAAA,oBAAA;EAA4B;AAC5B,MAAA,qBAAA,QAAA;AAAA,uBAAA,CAAoC,EAAE,QAAQ,MAAM,MAAM,UAAS,CAAE;EAAC;AACtE,MAAA,oBAAA,QAAA;AAAA,sBAAA,CAAA;EAAyB;AAEzB,MAAI,SAAS;AACb,MAAM,WAAW,YAAY,aAAa;AAC1C,MAAI,oBAAoB,SAAS;AAC7B,UAAM,IAAI,MACN,+EAAA,OAA+E,eAAa,uGAAA,CAAuG;;AAI3M,MAAI,uBAAuB;AAC3B,MAAI,MAAM,QAAQ,gBAAgB,GAAG;AAEjC,4BAAwB;AACxB,2BAAuB;SACpB;AAEH,4BAAwB,CAAC,EAAE,QAAQ,MAAM,MAAM,UAAS,CAAE;AAC1D,2BAAuB;;AAE3B,MAAM,WAAW,IAAI,qBAAAC,QAAQ,SAAA,EACzB,QACA,SAAO,SAAA,EAAI,IAAI,GAAE,GAAK,QAAQ,EAAA,GAC3B,oBAAoB,CAAA;AAE3B,MAAI,YAAY,SAAS,EAAE,KAAK,QAAQ;AAExC,SAAO;IACH,WAAW,SAAC,KAAa,SAAiB;AAAjB,UAAA,YAAA,QAAA;AAAA,kBAAA,CAAA;MAAiB;AAAK,aAAA,UAAU,KAAK,OAAO;IAAtB;IAC/C,cAAc,SAAC,WAAiB;AAG5B,aAAA,QAAQ,QAAQ,YAAY,SAAmB,CAAC,EAAE,KAC9C,SAACC,WAA6B;AAC1B,iBAAS;AACT,YAAM,cAAc,IAAI,qBAAAD,QAAQ,SAAA,EAC5B,QAAQ,WACR,SAAO,SAAA,EAAI,IAAI,GAAE,GAAKC,SAAQ,EAAA,GAC3B,eAAe,CAAA;AAEtB,oBAAY,YAAY,EAAE,KAAK,WAAW;MAC9C,CAAC;IATL;IAWJ,WAAW,WAAA;AAAM,aAAA;IAAA;IACjB,YAAY,WAAA;AAAM,aAAA;IAAA;;AAE1B;;;AC1EO,IAAM,sBAAsBC,aAC/B,WAAA;AAAM,SAAA;AAAA,GACN,MACA,CAAC,EAAE,MAAM,MAAM,OAAO,UAAS,CAAE,GACjC,EAAE,cAAc,KAAI,CAAE;;;AFG1B,IAAM,eAAe,kBAAiB;AAqF/B,IAAM,QAAQ,SAAC,OAAiB;AAE/B,MAAA,eAuBA,MAAK,cAtBL,WAsBA,MAAK,UArBL,WAqBA,MAAK,UApBL,WAoBA,MAAK,UAnBL,YAmBA,MAAK,WAlBL,eAkBA,MAAK,cAjBL,mBAiBA,MAAK,kBAhBL,QAgBA,MAAK,OAfL,KAeA,MAAK,cAfL,eAAY,OAAA,SAAG,sBAAmB,IAClC,SAcA,MAAK,QAbL,UAaA,MAAK,SAZL,YAYA,MAAK,WAXL,mBAWA,MAAK,kBAVL,eAUA,MAAK,cATL,cASA,MAAK,aARL,cAQA,MAAK,aAPL,KAOA,MAAK,OAPL,QAAK,OAAA,SAAG,eAAY,IACpB,QAMA,MAAK,OALL,QAKA,MAAK,OAJL,aAIA,MAAK,YAHL,YAGA,MAAK,WAFLC,gBAEA,MAAK,cADL,KACA,MAAK,OADL,QAAK,OAAA,SAAG,gBAAa;AAGzB,MAAI,cAAc,QAAQ,MAAuC;AAC7D,YAAQ,KACJ,sHAAsH;;AAI9H,SACI;IAAC;IAAY,EACT,cACA,UACA,cACA,cACA,OACA,aACA,OACA,YACA,WACA,cAAcA,cAAY;IAE1B,oBAAC,SAAO,EACJ,QACA,WACA,kBACA,UACA,OACA,OACA,SACA,WACA,kBACA,cACA,aACA,MAAY,GAEX,QAAQ;EACH;AAGtB;",
  "names": ["esm_default", "Polyglot", "messages", "esm_default", "defaultTheme"]
}
