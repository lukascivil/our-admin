import {
  es_default
} from "./chunk-PKLOVGDD.js";
import {
  require_react
} from "./chunk-CMM6OKGN.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/@handsontable/react/es/react-handsontable.js
var import_react = __toESM(require_react());
var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = /* @__PURE__ */ function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var inherits = function(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};
var possibleConstructorReturn = function(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};
var SettingsMapper = function() {
  function SettingsMapper2() {
    classCallCheck(this, SettingsMapper2);
    this.registeredHooks = es_default.hooks.getRegistered();
  }
  createClass(SettingsMapper2, [{
    key: "getSettings",
    value: function getSettings(properties) {
      var newSettings = {};
      if (properties.settings) {
        var settings = properties.settings;
        for (var key in settings) {
          if (settings.hasOwnProperty(key)) {
            newSettings[key] = settings[key];
          }
        }
      }
      for (var _key in properties) {
        if (_key !== "settings" && properties.hasOwnProperty(_key)) {
          newSettings[_key] = properties[_key];
        }
      }
      return newSettings;
    }
  }]);
  return SettingsMapper2;
}();
var version = "2.1.0";
var HotTable = function(_React$Component) {
  inherits(HotTable2, _React$Component);
  function HotTable2() {
    classCallCheck(this, HotTable2);
    var _this = possibleConstructorReturn(this, (HotTable2.__proto__ || Object.getPrototypeOf(HotTable2)).apply(this, arguments));
    _this.settingsMapper = new SettingsMapper();
    _this.id = null;
    _this.hotInstance = null;
    _this.hotElementRef = null;
    return _this;
  }
  createClass(HotTable2, [{
    key: "setHotElementRef",
    /**
     * Set the reference to the main Handsontable DOM element.
     *
     * @param {HTMLElement} element The main Handsontable DOM element.
     */
    value: function setHotElementRef(element) {
      this.hotElementRef = element;
    }
    /**
     * Initialize Handsontable after the component has mounted.
     */
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var newSettings = this.settingsMapper.getSettings(this.props);
      this.hotInstance = new es_default(this.hotElementRef, newSettings);
    }
    /**
     * Call the `updateHot` method and prevent the component from re-rendering the instance.
     *
     * @param {Object} nextProps
     * @param {Object} nextState
     * @returns {Boolean}
     */
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      this.updateHot(this.settingsMapper.getSettings(nextProps));
      return false;
    }
    /**
     * Destroy the Handsontable instance when the parent component unmounts.
     */
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.hotInstance.destroy();
    }
    /**
     * Render the table.
     */
  }, {
    key: "render",
    value: function render() {
      this.id = this.props.id || "hot-" + Math.random().toString(36).substring(5);
      this.className = this.props.className || "";
      this.style = this.props.style || {};
      return import_react.default.createElement("div", { ref: this.setHotElementRef.bind(this), id: this.id, className: this.className, style: this.style });
    }
    /**
     * Call the `updateSettings` method for the Handsontable instance.
     *
     * @param {Object} newSettings The settings object.
     */
  }, {
    key: "updateHot",
    value: function updateHot(newSettings) {
      this.hotInstance.updateSettings(newSettings, false);
    }
  }], [{
    key: "version",
    get: function get$$1() {
      return version;
    }
  }]);
  return HotTable2;
}(import_react.default.Component);
export {
  HotTable
};
//# sourceMappingURL=@handsontable_react.js.map
